{"version":3,"file":"index.js","sources":["../src/diffDOM/dom/fromVirtual.ts","../src/diffDOM/dom/apply.ts","../src/diffDOM/dom/undo.ts","../src/diffDOM/virtual/helpers.ts","../src/diffDOM/helpers.ts","../src/diffDOM/virtual/apply.ts","../src/diffDOM/virtual/fromDOM.ts","../src/diffDOM/virtual/fromString.ts","../src/diffDOM/virtual/diff.ts","../src/diffDOM/index.ts","../src/TraceLogger.ts"],"sourcesContent":["import { DiffDOMOptions, elementNodeType, textNodeType } from \"../types\"\n\nexport function objToNode(\n    objNode: elementNodeType,\n    insideSvg: boolean,\n    options: DiffDOMOptions\n) {\n    let node: Element | Text | Comment\n    if (objNode.nodeName === \"#text\") {\n        node = options.document.createTextNode((objNode as textNodeType).data)\n    } else if (objNode.nodeName === \"#comment\") {\n        node = options.document.createComment((objNode as textNodeType).data)\n    } else {\n        if (insideSvg) {\n            node = options.document.createElementNS(\n                \"http://www.w3.org/2000/svg\",\n                objNode.nodeName\n            )\n        } else if (objNode.nodeName.toLowerCase() === \"svg\") {\n            node = options.document.createElementNS(\n                \"http://www.w3.org/2000/svg\",\n                \"svg\"\n            )\n            insideSvg = true\n        } else {\n            node = options.document.createElement(objNode.nodeName)\n        }\n        if (objNode.attributes) {\n            Object.entries(objNode.attributes).forEach(([key, value]) =>\n                (node as Element).setAttribute(key, value)\n            )\n        }\n        if (objNode.childNodes) {\n            node = node as Element\n            objNode.childNodes.forEach(\n                (childNode: elementNodeType | textNodeType) =>\n                    node.appendChild(objToNode(childNode, insideSvg, options))\n            )\n        }\n        if (options.valueDiffing) {\n            if (\n                objNode.value &&\n                (node instanceof HTMLButtonElement ||\n                    node instanceof HTMLDataElement ||\n                    node instanceof HTMLInputElement ||\n                    node instanceof HTMLLIElement ||\n                    node instanceof HTMLMeterElement ||\n                    node instanceof HTMLOptionElement ||\n                    node instanceof HTMLProgressElement ||\n                    node instanceof HTMLParamElement)\n            ) {\n                node.value = objNode.value\n            }\n            if (objNode.checked && node instanceof HTMLInputElement) {\n                node.checked = objNode.checked\n            }\n            if (objNode.selected && node instanceof HTMLOptionElement) {\n                node.selected = objNode.selected\n            }\n        }\n    }\n    return node\n}\n","import { DiffDOMOptions, diffType, nodeType } from \"../types\"\nimport { Diff } from \"../helpers\"\n\nimport { objToNode } from \"./fromVirtual\"\n\n// ===== Apply a diff =====\n\nconst getFromRoute = (\n    node: Element,\n    route: number[]\n): Element | Text | false => {\n    route = route.slice()\n    while (route.length > 0) {\n        const c = route.splice(0, 1)[0]\n        node = node.childNodes[c] as Element\n    }\n    return node\n}\n\nexport function applyDiff(\n    tree: Element,\n    diff: diffType,\n    options: DiffDOMOptions // {preDiffApply, postDiffApply, textDiff, valueDiffing, _const}\n) {\n    const action = diff[options._const.action] as string | number\n    const route = diff[options._const.route] as number[]\n    let node\n\n    if (\n        ![options._const.addElement, options._const.addTextElement].includes(\n            action\n        )\n    ) {\n        // For adding nodes, we calculate the route later on. It's different because it includes the position of the newly added item.\n        node = getFromRoute(tree, route)\n    }\n\n    let newNode\n    let reference: Element\n    let nodeArray\n\n    // pre-diff hook\n    const info = {\n        diff,\n        node,\n    }\n\n    if (options.preDiffApply(info)) {\n        return true\n    }\n\n    switch (action) {\n        case options._const.addAttribute:\n            if (!node || !(node instanceof Element)) {\n                return false\n            }\n            node.setAttribute(\n                diff[options._const.name] as string,\n                diff[options._const.value] as string\n            )\n            break\n        case options._const.modifyAttribute:\n            if (!node || !(node instanceof Element)) {\n                return false\n            }\n            node.setAttribute(\n                diff[options._const.name] as string,\n                diff[options._const.newValue] as string\n            )\n            if (\n                node instanceof HTMLInputElement &&\n                diff[options._const.name] === \"value\"\n            ) {\n                node.value = diff[options._const.newValue] as string\n            }\n            break\n        case options._const.removeAttribute:\n            if (!node || !(node instanceof Element)) {\n                return false\n            }\n            node.removeAttribute(diff[options._const.name] as string)\n            break\n        case options._const.modifyTextElement:\n            if (!node || !(node instanceof Text)) {\n                return false\n            }\n            options.textDiff(\n                node,\n                node.data,\n                diff[options._const.oldValue] as string,\n                diff[options._const.newValue] as string\n            )\n            break\n        case options._const.modifyValue:\n            if (!node || typeof node.value === \"undefined\") {\n                return false\n            }\n            node.value = diff[options._const.newValue]\n            break\n        case options._const.modifyComment:\n            if (!node || !(node instanceof Comment)) {\n                return false\n            }\n            options.textDiff(\n                node,\n                node.data,\n                diff[options._const.oldValue] as string,\n                diff[options._const.newValue] as string\n            )\n            break\n        case options._const.modifyChecked:\n            if (!node || typeof node.checked === \"undefined\") {\n                return false\n            }\n            node.checked = diff[options._const.newValue]\n            break\n        case options._const.modifySelected:\n            if (!node || typeof node.selected === \"undefined\") {\n                return false\n            }\n            node.selected = diff[options._const.newValue]\n            break\n        case options._const.replaceElement:\n            node.parentNode.replaceChild(\n                objToNode(\n                    diff[options._const.newValue] as nodeType,\n                    (\n                        diff[options._const.newValue] as nodeType\n                    ).nodeName.toLowerCase() === \"svg\",\n                    options\n                ),\n                node\n            )\n            break\n        case options._const.relocateGroup:\n            nodeArray = Array(\n                ...new Array(diff[options._const.groupLength])\n            ).map(() =>\n                node.removeChild(\n                    node.childNodes[diff[options._const.from] as number]\n                )\n            )\n            nodeArray.forEach((childNode, index) => {\n                if (index === 0) {\n                    reference =\n                        node.childNodes[diff[options._const.to] as number]\n                }\n                node.insertBefore(childNode, reference || null)\n            })\n            break\n        case options._const.removeElement:\n            node.parentNode.removeChild(node)\n            break\n        case options._const.addElement: {\n            const parentRoute = route.slice()\n            const c: number = parentRoute.splice(parentRoute.length - 1, 1)[0]\n            node = getFromRoute(tree, parentRoute)\n            if (!(node instanceof Element)) {\n                return false\n            }\n            node.insertBefore(\n                objToNode(\n                    diff[options._const.element] as nodeType,\n                    node.namespaceURI === \"http://www.w3.org/2000/svg\",\n                    options\n                ),\n                node.childNodes[c] || null\n            )\n            break\n        }\n        case options._const.removeTextElement:\n            if (!node || node.nodeType !== 3) {\n                return false\n            }\n            node.parentNode.removeChild(node)\n            break\n        case options._const.addTextElement: {\n            const parentRoute = route.slice()\n            const c: number = parentRoute.splice(parentRoute.length - 1, 1)[0]\n            newNode = options.document.createTextNode(\n                diff[options._const.value] as string\n            )\n            node = getFromRoute(tree, parentRoute)\n            if (!node.childNodes) {\n                return false\n            }\n            node.insertBefore(newNode, node.childNodes[c] || null)\n            break\n        }\n        default:\n            console.log(\"unknown action\")\n    }\n\n    // if a new node was created, we might be interested in its\n    // post diff hook\n    options.postDiffApply({\n        diff: info.diff,\n        node: info.node,\n        newNode,\n    })\n\n    return true\n}\n\nexport function applyDOM(\n    tree: Element,\n    diffs: (Diff | diffType)[],\n    options: DiffDOMOptions\n) {\n    return diffs.every((diff: Diff | diffType) =>\n        applyDiff(tree, diff as diffType, options)\n    )\n}\n","import { DiffDOMOptions, diffType } from \"../types\"\nimport { Diff } from \"../helpers\"\nimport { applyDiff } from \"./apply\"\n\n// ===== Undo a diff =====\n\nfunction swap(obj: object, p1: string | number, p2: string | number) {\n    const tmp = obj[p1]\n    obj[p1] = obj[p2]\n    obj[p2] = tmp\n}\n\nfunction undoDiff(\n    tree: Element,\n    diff: diffType,\n    options: DiffDOMOptions // {preDiffApply, postDiffApply, textDiff, valueDiffing, _const}\n) {\n    switch (diff[options._const.action]) {\n        case options._const.addAttribute:\n            diff[options._const.action] = options._const.removeAttribute\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifyAttribute:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.removeAttribute:\n            diff[options._const.action] = options._const.addAttribute\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifyTextElement:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifyValue:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifyComment:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifyChecked:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifySelected:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.replaceElement:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.relocateGroup:\n            swap(diff, options._const.from, options._const.to)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.removeElement:\n            diff[options._const.action] = options._const.addElement\n            applyDiff(tree, diff, options)\n            break\n        case options._const.addElement:\n            diff[options._const.action] = options._const.removeElement\n            applyDiff(tree, diff, options)\n            break\n        case options._const.removeTextElement:\n            diff[options._const.action] = options._const.addTextElement\n            applyDiff(tree, diff, options)\n            break\n        case options._const.addTextElement:\n            diff[options._const.action] = options._const.removeTextElement\n            applyDiff(tree, diff, options)\n            break\n        default:\n            console.log(\"unknown action\")\n    }\n}\n\nexport function undoDOM(\n    tree: Element,\n    diffs: (diffType | Diff)[],\n    options: DiffDOMOptions\n) {\n    diffs = diffs.slice()\n    diffs.reverse()\n    diffs.forEach((diff: diffType | Diff) => {\n        undoDiff(tree, diff as diffType, options)\n    })\n}\n","import {\n    diffNodeType,\n    elementDiffNodeType,\n    elementNodeType,\n    nodeType,\n    subsetType,\n    textDiffNodeType,\n    textNodeType,\n} from \"../types\"\nimport { Diff } from \"../helpers\"\nconst elementDescriptors = (el: diffNodeType) => {\n    const output = []\n    output.push(el.nodeName)\n    if (el.nodeName !== \"#text\" && el.nodeName !== \"#comment\") {\n        el = el as elementDiffNodeType\n        if (el.attributes) {\n            if (el.attributes[\"class\"]) {\n                output.push(\n                    `${el.nodeName}.${el.attributes[\"class\"].replace(\n                        / /g,\n                        \".\"\n                    )}`\n                )\n            }\n            if (el.attributes.id) {\n                output.push(`${el.nodeName}#${el.attributes.id}`)\n            }\n        }\n    }\n    return output\n}\n\nconst findUniqueDescriptors = (li: diffNodeType[]) => {\n    const uniqueDescriptors = {}\n    const duplicateDescriptors = {}\n\n    li.forEach((node: nodeType) => {\n        elementDescriptors(node).forEach((descriptor) => {\n            const inUnique = descriptor in uniqueDescriptors\n            const inDupes = descriptor in duplicateDescriptors\n            if (!inUnique && !inDupes) {\n                uniqueDescriptors[descriptor] = true\n            } else if (inUnique) {\n                delete uniqueDescriptors[descriptor]\n                duplicateDescriptors[descriptor] = true\n            }\n        })\n    })\n\n    return uniqueDescriptors\n}\n\nexport const uniqueInBoth = (l1: diffNodeType[], l2: diffNodeType[]) => {\n    const l1Unique = findUniqueDescriptors(l1)\n    const l2Unique = findUniqueDescriptors(l2)\n    const inBoth = {}\n\n    Object.keys(l1Unique).forEach((key) => {\n        if (l2Unique[key]) {\n            inBoth[key] = true\n        }\n    })\n\n    return inBoth\n}\n\nexport const removeDone = (tree: elementDiffNodeType) => {\n    delete tree.outerDone\n    delete tree.innerDone\n    delete tree.valueDone\n    if (tree.childNodes) {\n        return tree.childNodes.every(removeDone)\n    } else {\n        return true\n    }\n}\n\nexport const cleanNode = (diffNode: diffNodeType) => {\n    if (Object.prototype.hasOwnProperty.call(diffNode, \"data\")) {\n        const textNode: textNodeType = {\n            nodeName: diffNode.nodeName === \"#text\" ? \"#text\" : \"#comment\",\n            data: (diffNode as textDiffNodeType).data,\n        }\n        return textNode\n    } else {\n        const elementNode: elementNodeType = {\n            nodeName: diffNode.nodeName,\n        }\n        diffNode = diffNode as elementDiffNodeType\n        if (Object.prototype.hasOwnProperty.call(diffNode, \"attributes\")) {\n            elementNode.attributes = diffNode.attributes\n        }\n        if (Object.prototype.hasOwnProperty.call(diffNode, \"checked\")) {\n            elementNode.checked = diffNode.checked\n        }\n        if (Object.prototype.hasOwnProperty.call(diffNode, \"value\")) {\n            elementNode.value = diffNode.value\n        }\n        if (Object.prototype.hasOwnProperty.call(diffNode, \"selected\")) {\n            elementNode.selected = diffNode.selected\n        }\n        if (Object.prototype.hasOwnProperty.call(diffNode, \"childNodes\")) {\n            elementNode.childNodes = diffNode.childNodes.map((diffChildNode) =>\n                cleanNode(diffChildNode)\n            )\n        }\n        return elementNode\n    }\n}\n\nexport const isEqual = (e1: diffNodeType, e2: diffNodeType) => {\n    if (\n        ![\"nodeName\", \"value\", \"checked\", \"selected\", \"data\"].every(\n            (element) => {\n                if (e1[element] !== e2[element]) {\n                    return false\n                }\n                return true\n            }\n        )\n    ) {\n        return false\n    }\n    if (Object.prototype.hasOwnProperty.call(e1, \"data\")) {\n        // Comment or Text\n        return true\n    }\n    e1 = e1 as elementDiffNodeType\n    e2 = e2 as elementDiffNodeType\n    if (Boolean(e1.attributes) !== Boolean(e2.attributes)) {\n        return false\n    }\n\n    if (Boolean(e1.childNodes) !== Boolean(e2.childNodes)) {\n        return false\n    }\n    if (e1.attributes) {\n        const e1Attributes = Object.keys(e1.attributes)\n        const e2Attributes = Object.keys(e2.attributes)\n\n        if (e1Attributes.length !== e2Attributes.length) {\n            return false\n        }\n        if (\n            !e1Attributes.every((attribute) => {\n                if (\n                    (e1 as elementDiffNodeType).attributes[attribute] !==\n                    (e2 as elementDiffNodeType).attributes[attribute]\n                ) {\n                    return false\n                }\n                return true\n            })\n        ) {\n            return false\n        }\n    }\n    if (e1.childNodes) {\n        if (e1.childNodes.length !== e2.childNodes.length) {\n            return false\n        }\n        if (\n            !e1.childNodes.every((childNode: nodeType, index: number) =>\n                isEqual(childNode, e2.childNodes[index])\n            )\n        ) {\n            return false\n        }\n    }\n\n    return true\n}\n\nexport const roughlyEqual = (\n    e1: diffNodeType,\n    e2: diffNodeType,\n    uniqueDescriptors: { [key: string]: boolean },\n    sameSiblings: boolean,\n    preventRecursion = false\n) => {\n    if (!e1 || !e2) {\n        return false\n    }\n\n    if (e1.nodeName !== e2.nodeName) {\n        return false\n    }\n\n    if ([\"#text\", \"#comment\"].includes(e1.nodeName)) {\n        // Note that we initially don't care what the text content of a node is,\n        // the mere fact that it's the same tag and \"has text\" means it's roughly\n        // equal, and then we can find out the true text difference later.\n        return preventRecursion\n            ? true\n            : (e1 as textDiffNodeType).data === (e2 as textDiffNodeType).data\n    }\n\n    e1 = e1 as elementDiffNodeType\n    e2 = e2 as elementDiffNodeType\n\n    if (e1.nodeName in uniqueDescriptors) {\n        return true\n    }\n\n    if (e1.attributes && e2.attributes) {\n        if (e1.attributes.id) {\n            if (e1.attributes.id !== e2.attributes.id) {\n                return false\n            } else {\n                const idDescriptor = `${e1.nodeName}#${e1.attributes.id}`\n                if (idDescriptor in uniqueDescriptors) {\n                    return true\n                }\n            }\n        }\n        if (\n            e1.attributes[\"class\"] &&\n            e1.attributes[\"class\"] === e2.attributes[\"class\"]\n        ) {\n            const classDescriptor = `${e1.nodeName}.${e1.attributes[\n                \"class\"\n            ].replace(/ /g, \".\")}`\n            if (classDescriptor in uniqueDescriptors) {\n                return true\n            }\n        }\n    }\n\n    if (sameSiblings) {\n        return true\n    }\n\n    const nodeList1 = e1.childNodes ? e1.childNodes.slice().reverse() : []\n    const nodeList2 = e2.childNodes ? e2.childNodes.slice().reverse() : []\n\n    if (nodeList1.length !== nodeList2.length) {\n        return false\n    }\n\n    if (preventRecursion) {\n        return nodeList1.every(\n            (element: nodeType, index: number) =>\n                element.nodeName === nodeList2[index].nodeName\n        )\n    } else {\n        // note: we only allow one level of recursion at any depth. If 'preventRecursion'\n        // was not set, we must explicitly force it to true for child iterations.\n        const childUniqueDescriptors = uniqueInBoth(nodeList1, nodeList2)\n        return nodeList1.every((element: nodeType, index: number) =>\n            roughlyEqual(\n                element,\n                nodeList2[index],\n                childUniqueDescriptors,\n                true,\n                true\n            )\n        )\n    }\n}\n\n/**\n * based on https://en.wikibooks.org/wiki/Algorithm_implementation/Strings/Longest_common_substring#JavaScript\n */\nconst findCommonSubsets = (\n    c1: diffNodeType[],\n    c2: diffNodeType[],\n    marked1: boolean[],\n    marked2: boolean[]\n) => {\n    let lcsSize = 0\n    let index: number[] = []\n    const c1Length = c1.length\n    const c2Length = c2.length\n\n    const // set up the matching table\n        matches = Array(...new Array(c1Length + 1)).map(() => [])\n\n    const uniqueDescriptors = uniqueInBoth(c1, c2)\n\n    let // If all of the elements are the same tag, id and class, then we can\n        // consider them roughly the same even if they have a different number of\n        // children. This will reduce removing and re-adding similar elements.\n        subsetsSame = c1Length === c2Length\n\n    if (subsetsSame) {\n        c1.some((element: nodeType, i: number) => {\n            const c1Desc = elementDescriptors(element)\n            const c2Desc = elementDescriptors(c2[i])\n            if (c1Desc.length !== c2Desc.length) {\n                subsetsSame = false\n                return true\n            }\n            c1Desc.some((description, i) => {\n                if (description !== c2Desc[i]) {\n                    subsetsSame = false\n                    return true\n                }\n            })\n            if (!subsetsSame) {\n                return true\n            }\n        })\n    }\n\n    // fill the matches with distance values\n    for (let c1Index = 0; c1Index < c1Length; c1Index++) {\n        const c1Element = c1[c1Index]\n        for (let c2Index = 0; c2Index < c2Length; c2Index++) {\n            const c2Element = c2[c2Index]\n            if (\n                !marked1[c1Index] &&\n                !marked2[c2Index] &&\n                roughlyEqual(\n                    c1Element,\n                    c2Element,\n                    uniqueDescriptors,\n                    subsetsSame\n                )\n            ) {\n                matches[c1Index + 1][c2Index + 1] = matches[c1Index][c2Index]\n                    ? matches[c1Index][c2Index] + 1\n                    : 1\n                if (matches[c1Index + 1][c2Index + 1] >= lcsSize) {\n                    lcsSize = matches[c1Index + 1][c2Index + 1]\n                    index = [c1Index + 1, c2Index + 1]\n                }\n            } else {\n                matches[c1Index + 1][c2Index + 1] = 0\n            }\n        }\n    }\n\n    if (lcsSize === 0) {\n        return false\n    }\n\n    return {\n        oldValue: index[0] - lcsSize,\n        newValue: index[1] - lcsSize,\n        length: lcsSize,\n    }\n}\n\nconst makeBooleanArray = (n: number, v: boolean) =>\n    Array(...new Array(n)).map(() => v)\n\n/**\n * Generate arrays that indicate which node belongs to which subset,\n * or whether it's actually an orphan node, existing in only one\n * of the two trees, rather than somewhere in both.\n *\n * So if t1 = <img><canvas><br>, t2 = <canvas><br><img>.\n * The longest subset is \"<canvas><br>\" (length 2), so it will group 0.\n * The second longest is \"<img>\" (length 1), so it will be group 1.\n * gaps1 will therefore be [1,0,0] and gaps2 [0,0,1].\n *\n * If an element is not part of any group, it will stay being 'true', which\n * is the initial value. For example:\n * t1 = <img><p></p><br><canvas>, t2 = <b></b><br><canvas><img>\n *\n * The \"<p></p>\" and \"<b></b>\" do only show up in one of the two and will\n * therefore be marked by \"true\". The remaining parts are parts of the\n * groups 0 and 1:\n * gaps1 = [1, true, 0, 0], gaps2 = [true, 0, 0, 1]\n *\n */\nexport const getGapInformation = (\n    t1: elementDiffNodeType,\n    t2: elementDiffNodeType,\n    stable: subsetType[]\n) => {\n    const gaps1: (true | number)[] = t1.childNodes\n        ? (makeBooleanArray(t1.childNodes.length, true) as true[])\n        : []\n    const gaps2: (true | number)[] = t2.childNodes\n        ? (makeBooleanArray(t2.childNodes.length, true) as true[])\n        : []\n    let group = 0\n\n    // give elements from the same subset the same group number\n    stable.forEach((subset: subsetType) => {\n        const endOld = subset.oldValue + subset.length\n        const endNew = subset.newValue + subset.length\n\n        for (let j = subset.oldValue; j < endOld; j += 1) {\n            gaps1[j] = group\n        }\n        for (let j = subset.newValue; j < endNew; j += 1) {\n            gaps2[j] = group\n        }\n        group += 1\n    })\n\n    return {\n        gaps1,\n        gaps2,\n    }\n}\n\n/**\n * Find all matching subsets, based on immediate child differences only.\n */\nconst markBoth = (marked1, marked2, subset: subsetType, i: number) => {\n    marked1[subset.oldValue + i] = true\n    marked2[subset.newValue + i] = true\n}\n\nexport const markSubTrees = (\n    oldTree: elementDiffNodeType,\n    newTree: elementDiffNodeType\n) => {\n    // note: the child lists are views, and so update as we update old/newTree\n    const oldChildren = oldTree.childNodes ? oldTree.childNodes : []\n\n    const newChildren = newTree.childNodes ? newTree.childNodes : []\n    const marked1 = makeBooleanArray(oldChildren.length, false)\n    const marked2 = makeBooleanArray(newChildren.length, false)\n    const subsets = []\n\n    const returnIndex = function () {\n        return arguments[1]\n    }\n\n    let foundAllSubsets = false\n\n    while (!foundAllSubsets) {\n        const subset = findCommonSubsets(\n            oldChildren,\n            newChildren,\n            marked1,\n            marked2\n        )\n        if (subset) {\n            subsets.push(subset)\n            const subsetArray = Array(...new Array(subset.length)).map(\n                returnIndex\n            )\n            subsetArray.forEach((item) =>\n                markBoth(marked1, marked2, subset, item)\n            )\n        } else {\n            foundAllSubsets = true\n        }\n    }\n\n    oldTree.subsets = subsets\n    oldTree.subsetsAge = 100\n    return subsets\n}\n\nexport class DiffTracker {\n    list: Diff[]\n    constructor() {\n        this.list = []\n    }\n\n    add(diffs: Diff[]) {\n        this.list.push(...diffs)\n    }\n    forEach(fn: (Diff) => void) {\n        this.list.forEach((li: Diff) => fn(li))\n    }\n}\n\n//export const elementHasValue = (element: Element) : boolean => element instanceof HTMLButtonElement || element instanceof HTMLDataElement || element instanceof HTMLInputElement || element instanceof HTMLLIElement || element instanceof HTMLMeterElement || element instanceof HTMLOptionElement || element instanceof HTMLProgressElement || element instanceof HTMLParamElement\n","import { elementNodeType } from \"./types\"\n\nexport class Diff {\n    constructor(options = {}) {\n        Object.entries(options).forEach(([key, value]) => (this[key] = value))\n    }\n\n    toString() {\n        return JSON.stringify(this)\n    }\n\n    setValue(\n        aKey: string | number,\n        aValue:\n            | string\n            | number\n            | boolean\n            | number[]\n            | { [key: string]: string | { [key: string]: string } }\n            | elementNodeType\n    ) {\n        this[aKey] = aValue\n        return this\n    }\n}\n","import { DiffDOMOptions, elementNodeType, nodeType, subsetType } from \"../types\"\nimport { Diff } from \"../helpers\"\n// ===== Apply a virtual diff =====\n\nfunction getFromVirtualRoute(tree: elementNodeType, route: number[]) {\n    let node = tree\n    let parentNode\n    let nodeIndex\n\n    route = route.slice()\n    while (route.length > 0) {\n        nodeIndex = route.splice(0, 1)[0]\n        parentNode = node\n        node = node.childNodes ? node.childNodes[nodeIndex] : undefined\n    }\n    return {\n        node,\n        parentNode,\n        nodeIndex,\n    }\n}\n\nfunction applyVirtualDiff(\n    tree: elementNodeType,\n    diff: Diff,\n    options: DiffDOMOptions // {preVirtualDiffApply, postVirtualDiffApply, _const}\n) {\n    let node, parentNode, nodeIndex\n\n    if (\n        ![options._const.addElement, options._const.addTextElement].includes(\n            diff[options._const.action]\n        )\n    ) {\n        // For adding nodes, we calculate the route later on. It's different because it includes the position of the newly added item.\n        const routeInfo = getFromVirtualRoute(tree, diff[options._const.route])\n        node = routeInfo.node\n        parentNode = routeInfo.parentNode\n        nodeIndex = routeInfo.nodeIndex\n    }\n\n    const newSubsets: subsetType[] = []\n\n    // pre-diff hook\n    const info = {\n        diff,\n        node,\n    }\n\n    if (options.preVirtualDiffApply(info)) {\n        return true\n    }\n\n    let newNode\n    let nodeArray\n    let route\n\n    switch (diff[options._const.action]) {\n        case options._const.addAttribute:\n            if (!node.attributes) {\n                node.attributes = {}\n            }\n\n            node.attributes[diff[options._const.name]] =\n                diff[options._const.value]\n\n            if (diff[options._const.name] === \"checked\") {\n                node.checked = true\n            } else if (diff[options._const.name] === \"selected\") {\n                node.selected = true\n            } else if (\n                node.nodeName === \"INPUT\" &&\n                diff[options._const.name] === \"value\"\n            ) {\n                node.value = diff[options._const.value]\n            }\n\n            break\n        case options._const.modifyAttribute:\n            node.attributes[diff[options._const.name]] =\n                diff[options._const.newValue]\n            break\n        case options._const.removeAttribute:\n            delete node.attributes[diff[options._const.name]]\n\n            if (Object.keys(node.attributes).length === 0) {\n                delete node.attributes\n            }\n\n            if (diff[options._const.name] === \"checked\") {\n                node.checked = false\n            } else if (diff[options._const.name] === \"selected\") {\n                delete node.selected\n            } else if (\n                node.nodeName === \"INPUT\" &&\n                diff[options._const.name] === \"value\"\n            ) {\n                delete node.value\n            }\n\n            break\n        case options._const.modifyTextElement:\n            node.data = diff[options._const.newValue]\n            break\n        case options._const.modifyValue:\n            node.value = diff[options._const.newValue]\n            break\n        case options._const.modifyComment:\n            node.data = diff[options._const.newValue]\n            break\n        case options._const.modifyChecked:\n            node.checked = diff[options._const.newValue]\n            break\n        case options._const.modifySelected:\n            node.selected = diff[options._const.newValue]\n            break\n        case options._const.replaceElement:\n            newNode = diff[options._const.newValue]\n            parentNode.childNodes[nodeIndex] = newNode\n            break\n        case options._const.relocateGroup:\n            nodeArray = node.childNodes\n                .splice(\n                    diff[options._const.from],\n                    diff[options._const.groupLength]\n                )\n                .reverse()\n            nodeArray.forEach((movedNode: nodeType) =>\n                node.childNodes.splice(diff[options._const.to], 0, movedNode)\n            )\n            if (node.subsets) {\n                node.subsets.forEach((map: subsetType) => {\n                    if (\n                        diff[options._const.from] < diff[options._const.to] &&\n                        map.oldValue <= diff[options._const.to] &&\n                        map.oldValue > diff[options._const.from]\n                    ) {\n                        map.oldValue -= diff[options._const.groupLength]\n                        const splitLength =\n                            map.oldValue + map.length - diff[options._const.to]\n                        if (splitLength > 0) {\n                            // new insertion splits map.\n                            newSubsets.push({\n                                oldValue:\n                                    diff[options._const.to] +\n                                    diff[options._const.groupLength],\n                                newValue:\n                                    map.newValue + map.length - splitLength,\n                                length: splitLength,\n                            })\n                            map.length -= splitLength\n                        }\n                    } else if (\n                        diff[options._const.from] > diff[options._const.to] &&\n                        map.oldValue > diff[options._const.to] &&\n                        map.oldValue < diff[options._const.from]\n                    ) {\n                        map.oldValue += diff[options._const.groupLength]\n                        const splitLength =\n                            map.oldValue + map.length - diff[options._const.to]\n                        if (splitLength > 0) {\n                            // new insertion splits map.\n                            newSubsets.push({\n                                oldValue:\n                                    diff[options._const.to] +\n                                    diff[options._const.groupLength],\n                                newValue:\n                                    map.newValue + map.length - splitLength,\n                                length: splitLength,\n                            })\n                            map.length -= splitLength\n                        }\n                    } else if (map.oldValue === diff[options._const.from]) {\n                        map.oldValue = diff[options._const.to]\n                    }\n                })\n            }\n\n            break\n        case options._const.removeElement:\n            parentNode.childNodes.splice(nodeIndex, 1)\n            if (parentNode.subsets) {\n                parentNode.subsets.forEach((map: subsetType) => {\n                    if (map.oldValue > nodeIndex) {\n                        map.oldValue -= 1\n                    } else if (map.oldValue === nodeIndex) {\n                        map.delete = true\n                    } else if (\n                        map.oldValue < nodeIndex &&\n                        map.oldValue + map.length > nodeIndex\n                    ) {\n                        if (map.oldValue + map.length - 1 === nodeIndex) {\n                            map.length--\n                        } else {\n                            newSubsets.push({\n                                newValue:\n                                    map.newValue + nodeIndex - map.oldValue,\n                                oldValue: nodeIndex,\n                                length:\n                                    map.length - nodeIndex + map.oldValue - 1,\n                            })\n                            map.length = nodeIndex - map.oldValue\n                        }\n                    }\n                })\n            }\n            node = parentNode\n            break\n        case options._const.addElement: {\n            route = diff[options._const.route].slice()\n            const c: number = route.splice(route.length - 1, 1)[0]\n            node = getFromVirtualRoute(tree, route)?.node\n            newNode = diff[options._const.element]\n\n            if (!node.childNodes) {\n                node.childNodes = []\n            }\n\n            if (c >= node.childNodes.length) {\n                node.childNodes.push(newNode)\n            } else {\n                node.childNodes.splice(c, 0, newNode)\n            }\n            if (node.subsets) {\n                node.subsets.forEach((map: subsetType) => {\n                    if (map.oldValue >= c) {\n                        map.oldValue += 1\n                    } else if (\n                        map.oldValue < c &&\n                        map.oldValue + map.length > c\n                    ) {\n                        const splitLength = map.oldValue + map.length - c\n                        newSubsets.push({\n                            newValue: map.newValue + map.length - splitLength,\n                            oldValue: c + 1,\n                            length: splitLength,\n                        })\n                        map.length -= splitLength\n                    }\n                })\n            }\n            break\n        }\n        case options._const.removeTextElement:\n            parentNode.childNodes.splice(nodeIndex, 1)\n            if (parentNode.nodeName === \"TEXTAREA\") {\n                delete parentNode.value\n            }\n            if (parentNode.subsets) {\n                parentNode.subsets.forEach((map: subsetType) => {\n                    if (map.oldValue > nodeIndex) {\n                        map.oldValue -= 1\n                    } else if (map.oldValue === nodeIndex) {\n                        map.delete = true\n                    } else if (\n                        map.oldValue < nodeIndex &&\n                        map.oldValue + map.length > nodeIndex\n                    ) {\n                        if (map.oldValue + map.length - 1 === nodeIndex) {\n                            map.length--\n                        } else {\n                            newSubsets.push({\n                                newValue:\n                                    map.newValue + nodeIndex - map.oldValue,\n                                oldValue: nodeIndex,\n                                length:\n                                    map.length - nodeIndex + map.oldValue - 1,\n                            })\n                            map.length = nodeIndex - map.oldValue\n                        }\n                    }\n                })\n            }\n            node = parentNode\n            break\n        case options._const.addTextElement: {\n            route = diff[options._const.route].slice()\n            const c: number = route.splice(route.length - 1, 1)[0]\n            newNode = {}\n            newNode.nodeName = \"#text\"\n            newNode.data = diff[options._const.value]\n            node = getFromVirtualRoute(tree, route).node\n            if (!node.childNodes) {\n                node.childNodes = []\n            }\n\n            if (c >= node.childNodes.length) {\n                node.childNodes.push(newNode)\n            } else {\n                node.childNodes.splice(c, 0, newNode)\n            }\n            if (node.nodeName === \"TEXTAREA\") {\n                node.value = diff[options._const.newValue]\n            }\n            if (node.subsets) {\n                node.subsets.forEach((map: subsetType) => {\n                    if (map.oldValue >= c) {\n                        map.oldValue += 1\n                    }\n                    if (map.oldValue < c && map.oldValue + map.length > c) {\n                        const splitLength = map.oldValue + map.length - c\n                        newSubsets.push({\n                            newValue: map.newValue + map.length - splitLength,\n                            oldValue: c + 1,\n                            length: splitLength,\n                        })\n                        map.length -= splitLength\n                    }\n                })\n            }\n            break\n        }\n        default:\n            console.log(\"unknown action\")\n    }\n\n    if (node.subsets) {\n        node.subsets = node.subsets.filter(\n            (map: subsetType) => !map.delete && map.oldValue !== map.newValue\n        )\n        if (newSubsets.length) {\n            node.subsets = node.subsets.concat(newSubsets)\n        }\n    }\n\n    options.postVirtualDiffApply({\n        node: info.node,\n        diff: info.diff,\n        newNode,\n    })\n\n    return\n}\n\nexport function applyVirtual(\n    tree: elementNodeType,\n    diffs: Diff[],\n    options: DiffDOMOptions\n) {\n    diffs.forEach((diff: Diff) => {\n        applyVirtualDiff(tree, diff, options)\n    })\n    return true\n}\n","import { DiffDOMOptionsPartial, elementNodeType, textNodeType } from \"../types\"\n\nexport function nodeToObj(\n    aNode: Element,\n    options: DiffDOMOptionsPartial = { valueDiffing: true }\n) {\n    const objNode: elementNodeType | textNodeType = {\n        nodeName: aNode.nodeName,\n    }\n    if (aNode instanceof Text || aNode instanceof Comment) {\n        ;(objNode as unknown as textNodeType).data = aNode.data\n    } else {\n        if (aNode.attributes && aNode.attributes.length > 0) {\n            objNode.attributes = {}\n            const nodeArray = Array.prototype.slice.call(aNode.attributes)\n            nodeArray.forEach(\n                (attribute) =>\n                    (objNode.attributes[attribute.name] = attribute.value)\n            )\n        }\n        if (aNode instanceof HTMLTextAreaElement) {\n            objNode.value = aNode.value\n        } else if (aNode.childNodes && aNode.childNodes.length > 0) {\n            objNode.childNodes = []\n            const nodeArray = Array.prototype.slice.call(aNode.childNodes)\n            nodeArray.forEach((childNode) =>\n                objNode.childNodes.push(nodeToObj(childNode, options))\n            )\n        }\n        if (options.valueDiffing) {\n            if (\n                aNode instanceof HTMLInputElement &&\n                [\"radio\", \"checkbox\"].includes(aNode.type.toLowerCase()) &&\n                aNode.checked !== undefined\n            ) {\n                objNode.checked = aNode.checked\n            } else if (\n                aNode instanceof HTMLButtonElement ||\n                aNode instanceof HTMLDataElement ||\n                aNode instanceof HTMLInputElement ||\n                aNode instanceof HTMLLIElement ||\n                aNode instanceof HTMLMeterElement ||\n                aNode instanceof HTMLOptionElement ||\n                aNode instanceof HTMLProgressElement ||\n                aNode instanceof HTMLParamElement\n            ) {\n                objNode.value = aNode.value\n            }\n            if (aNode instanceof HTMLOptionElement) {\n                objNode.selected = aNode.selected\n            }\n        }\n    }\n    return objNode\n}\n","import { nodeType } from \"../types\"\n\n// from html-parse-stringify (MIT)\n\nconst tagRE =\n    /<\\s*\\/*[a-zA-Z:_][a-zA-Z0-9:_\\-.]*\\s*(?:\"[^\"]*\"['\"]*|'[^']*'['\"]*|[^'\"/>])*\\/*\\s*>|<!--(?:.|\\n|\\r)*?-->/g\n\n// re-used obj for quick lookups of components\nconst empty = Object.create ? Object.create(null) : {}\nconst attrRE = /\\s([^'\"/\\s><]+?)[\\s/>]|([^\\s=]+)=\\s?(\".*?\"|'.*?')/g\n\nfunction unescape(string: string) {\n    return string\n        .replace(/&lt;/g, \"<\")\n        .replace(/&gt;/g, \">\")\n        .replace(/&amp;/g, \"&\")\n}\n\n// create optimized lookup object for\n// void elements as listed here:\n// https://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements\nconst lookup = {\n    area: true,\n    base: true,\n    br: true,\n    col: true,\n    embed: true,\n    hr: true,\n    img: true,\n    input: true,\n    keygen: true,\n    link: true,\n    menuItem: true,\n    meta: true,\n    param: true,\n    source: true,\n    track: true,\n    wbr: true,\n}\n\nconst parseTag = (tag: string) => {\n    const res = {\n        nodeName: \"\",\n        attributes: {},\n    }\n    let voidElement = false\n    let type = \"tag\"\n\n    let tagMatch = tag.match(/<\\/?([^\\s]+?)[/\\s>]/)\n    if (tagMatch) {\n        res.nodeName = tagMatch[1].toUpperCase()\n        if (lookup[tagMatch[1]] || tag.charAt(tag.length - 2) === \"/\") {\n            voidElement = true\n        }\n\n        // handle comment tag\n        if (res.nodeName.startsWith(\"!--\")) {\n            const endIndex = tag.indexOf(\"-->\")\n            return {\n                type: \"comment\",\n                node: {\n                    nodeName: \"#comment\",\n                    data: endIndex !== -1 ? tag.slice(4, endIndex) : \"\",\n                },\n                voidElement,\n            }\n        }\n    }\n\n    let reg = new RegExp(attrRE)\n    let result = null\n    let done = false\n    while (!done) {\n        result = reg.exec(tag)\n\n        if (result === null) {\n            done = true\n        } else if (result[0].trim()) {\n            if (result[1]) {\n                let attr = result[1].trim()\n                let arr = [attr, \"\"]\n\n                if (attr.indexOf(\"=\") > -1) arr = attr.split(\"=\")\n                res.attributes[arr[0]] = arr[1]\n                reg.lastIndex--\n            } else if (result[2])\n                res.attributes[result[2]] = result[3]\n                    .trim()\n                    .substring(1, result[3].length - 1)\n        }\n    }\n\n    return {\n        type,\n        node: res,\n        voidElement,\n    }\n}\n\nexport const stringToObj = (html: string, options = { components: empty }) => {\n    const result: nodeType[] = []\n    let current: { type: string; node: nodeType; voidElement: boolean }\n    let level = -1\n    const arr: { type: string; node: nodeType; voidElement: boolean }[] = []\n    let inComponent = false\n\n    // handle text at top level\n    if (html.indexOf(\"<\") !== 0) {\n        const end = html.indexOf(\"<\")\n        result.push({\n            nodeName: \"#text\",\n            data: end === -1 ? html : html.substring(0, end),\n        })\n    }\n\n    html.replace(tagRE, (tag: string, index: number) => {\n        if (inComponent) {\n            if (tag !== `</${current.node.nodeName}>`) {\n                return \"\"\n            } else {\n                inComponent = false\n            }\n        }\n        const isOpen = tag.charAt(1) !== \"/\"\n        const isComment = tag.startsWith(\"<!--\")\n        const start = index + tag.length\n        const nextChar = html.charAt(start)\n\n        if (isComment) {\n            const comment = parseTag(tag).node\n\n            // if we're at root, push new base node\n            if (level < 0) {\n                result.push(comment)\n                return \"\"\n            }\n            const parent = arr[level]\n            if (parent && comment.nodeName) {\n                if (!parent.node.childNodes) {\n                    parent.node.childNodes = []\n                }\n                parent.node.childNodes.push(comment)\n            }\n            return \"\"\n        }\n\n        if (isOpen) {\n            current = parseTag(tag)\n            level++\n            if (\n                current.type === \"tag\" &&\n                options.components[current.node.nodeName]\n            ) {\n                current.type = \"component\"\n                inComponent = true\n            }\n            if (\n                !current.voidElement &&\n                !inComponent &&\n                nextChar &&\n                nextChar !== \"<\"\n            ) {\n                if (!current.node.childNodes) {\n                    current.node.childNodes = []\n                }\n                current.node.childNodes.push({\n                    nodeName: \"#text\",\n                    data: unescape(html.slice(start, html.indexOf(\"<\", start))),\n                })\n            }\n            // if we're at root, push new base node\n            if (level === 0 && current.node.nodeName) {\n                result.push(current.node)\n            }\n\n            const parent = arr[level - 1]\n            if (parent && current.node.nodeName) {\n                if (!parent.node.childNodes) {\n                    parent.node.childNodes = []\n                }\n                parent.node.childNodes.push(current.node)\n            }\n            arr[level] = current\n        }\n        if (!isOpen || current.voidElement) {\n            if (\n                level > -1 &&\n                (current.voidElement ||\n                    current.node.nodeName === tag.slice(2, -1).toUpperCase())\n            ) {\n                level--\n                // move current up a level to match the end tag\n                if (level > -1) {\n                    current = arr[level]\n                }\n            }\n            if (!inComponent && nextChar !== \"<\" && nextChar) {\n                // trailing text node\n                // if we're at the root, push a base text node. otherwise add as\n                // a child to the current node.\n                const childNodes =\n                    level === -1 ? result : arr[level].node.childNodes || []\n\n                // calculate correct end of the data slice in case there's\n                // no tag after the text node.\n                const end = html.indexOf(\"<\", start)\n                let data = unescape(\n                    html.slice(start, end === -1 ? undefined : end)\n                )\n                childNodes.push({\n                    nodeName: \"#text\",\n                    data,\n                })\n            }\n        }\n        return \"\"\n    })\n    return result[0]\n}\n","import {\n    DiffDOMOptions,\n    diffNodeType,\n    elementDiffNodeType,\n    elementNodeType,\n    subsetType,\n    textDiffNodeType,\n} from \"../types\"\nimport {\n    DiffTracker,\n    cleanNode,\n    getGapInformation,\n    isEqual,\n    markSubTrees,\n    removeDone,\n    roughlyEqual,\n} from \"./helpers\"\nimport { Diff } from \"../helpers\"\nimport { applyVirtual } from \"./apply\"\nimport { nodeToObj } from \"./fromDOM\"\nimport { stringToObj } from \"./fromString\"\n\n// ===== Create a diff =====\n\nexport class DiffFinder {\n    debug: boolean\n    diffcount: number\n    foundAll: boolean\n    options: DiffDOMOptions\n    t1: elementDiffNodeType\n    t1Orig: elementNodeType\n    t2: elementDiffNodeType\n    t2Orig: elementNodeType\n    tracker: DiffTracker\n    constructor(\n        t1Node: string | elementNodeType | Element,\n        t2Node: string | elementNodeType | Element,\n        options: DiffDOMOptions\n    ) {\n        this.options = options\n        this.t1 = (\n            typeof Element !== \"undefined\" && t1Node instanceof Element\n                ? nodeToObj(t1Node, this.options)\n                : typeof t1Node === \"string\"\n                ? stringToObj(t1Node, this.options)\n                : JSON.parse(JSON.stringify(t1Node))\n        ) as elementDiffNodeType\n        this.t2 = (\n            typeof Element !== \"undefined\" && t2Node instanceof Element\n                ? nodeToObj(t2Node, this.options)\n                : typeof t2Node === \"string\"\n                ? stringToObj(t2Node, this.options)\n                : JSON.parse(JSON.stringify(t2Node))\n        ) as elementDiffNodeType\n        this.diffcount = 0\n        this.foundAll = false\n        if (this.debug) {\n            this.t1Orig =\n                typeof Element !== \"undefined\" && t1Node instanceof Element\n                    ? nodeToObj(t1Node, this.options)\n                    : typeof t1Node === \"string\"\n                    ? stringToObj(t1Node, this.options)\n                    : JSON.parse(JSON.stringify(t1Node))\n            this.t2Orig =\n                typeof Element !== \"undefined\" && t2Node instanceof Element\n                    ? nodeToObj(t2Node, this.options)\n                    : typeof t2Node === \"string\"\n                    ? stringToObj(t2Node, this.options)\n                    : JSON.parse(JSON.stringify(t2Node))\n        }\n\n        this.tracker = new DiffTracker()\n    }\n\n    init() {\n        return this.findDiffs(this.t1, this.t2)\n    }\n\n    findDiffs(t1: elementDiffNodeType, t2: elementDiffNodeType) {\n        let diffs\n        do {\n            if (this.options.debug) {\n                this.diffcount += 1\n                if (this.diffcount > this.options.diffcap) {\n                    throw new Error(\n                        `surpassed diffcap:${JSON.stringify(\n                            this.t1Orig\n                        )} -> ${JSON.stringify(this.t2Orig)}`\n                    )\n                }\n            }\n            diffs = this.findNextDiff(t1, t2, [])\n\n            if (diffs.length === 0) {\n                // Last check if the elements really are the same now.\n                // If not, remove all info about being done and start over.\n                // Sometimes a node can be marked as done, but the creation of subsequent diffs means that it has to be changed again.\n                if (!isEqual(t1, t2)) {\n                    if (this.foundAll) {\n                        console.error(\"Could not find remaining diffs!\")\n                    } else {\n                        this.foundAll = true\n                        removeDone(t1)\n                        diffs = this.findNextDiff(t1, t2, [])\n                    }\n                }\n            }\n            if (diffs.length > 0) {\n                this.foundAll = false\n                this.tracker.add(diffs)\n                applyVirtual(t1, diffs, this.options)\n            }\n        } while (diffs.length > 0)\n\n        return this.tracker.list\n    }\n\n    findNextDiff(t1: diffNodeType, t2: diffNodeType, route: number[]) {\n        let diffs\n        let fdiffs\n\n        if (this.options.maxDepth && route.length > this.options.maxDepth) {\n            return []\n        }\n        // outer differences?\n        if (!t1.outerDone) {\n            diffs = this.findOuterDiff(t1, t2, route)\n            if (this.options.filterOuterDiff) {\n                fdiffs = this.options.filterOuterDiff(t1, t2, diffs)\n                if (fdiffs) diffs = fdiffs\n            }\n            if (diffs.length > 0) {\n                t1.outerDone = true\n                return diffs\n            } else {\n                t1.outerDone = true\n            }\n        }\n        if (Object.prototype.hasOwnProperty.call(t1, \"data\")) {\n            // Comment or Text\n            return []\n        }\n        t1 = t1 as elementDiffNodeType\n        t2 = t2 as elementDiffNodeType\n\n        // inner differences?\n        if (!t1.innerDone) {\n            diffs = this.findInnerDiff(t1, t2, route)\n            if (diffs.length > 0) {\n                return diffs\n            } else {\n                t1.innerDone = true\n            }\n        }\n\n        if (this.options.valueDiffing && !t1.valueDone) {\n            // value differences?\n            diffs = this.findValueDiff(t1, t2, route)\n\n            if (diffs.length > 0) {\n                t1.valueDone = true\n                return diffs\n            } else {\n                t1.valueDone = true\n            }\n        }\n\n        // no differences\n        return []\n    }\n\n    findOuterDiff(t1: diffNodeType, t2: diffNodeType, route: number[]) {\n        const diffs = []\n        let attr\n        let attr1\n        let attr2\n        let attrLength\n        let pos\n        let i\n        if (t1.nodeName !== t2.nodeName) {\n            if (!route.length) {\n                throw new Error(\"Top level nodes have to be of the same kind.\")\n            }\n            return [\n                new Diff()\n                    .setValue(\n                        this.options._const.action,\n                        this.options._const.replaceElement\n                    )\n                    .setValue(this.options._const.oldValue, cleanNode(t1))\n                    .setValue(this.options._const.newValue, cleanNode(t2))\n                    .setValue(this.options._const.route, route),\n            ]\n        }\n        if (\n            route.length &&\n            this.options.diffcap <\n                Math.abs(\n                    (t1.childNodes || []).length - (t2.childNodes || []).length\n                )\n        ) {\n            return [\n                new Diff()\n                    .setValue(\n                        this.options._const.action,\n                        this.options._const.replaceElement\n                    )\n                    .setValue(this.options._const.oldValue, cleanNode(t1))\n                    .setValue(this.options._const.newValue, cleanNode(t2))\n                    .setValue(this.options._const.route, route),\n            ]\n        }\n\n        if (\n            Object.prototype.hasOwnProperty.call(t1, \"data\") &&\n            (t1 as textDiffNodeType).data !== (t2 as textDiffNodeType).data\n        ) {\n            // Comment or text node.\n            if (t1.nodeName === \"#text\") {\n                return [\n                    new Diff()\n                        .setValue(\n                            this.options._const.action,\n                            this.options._const.modifyTextElement\n                        )\n                        .setValue(this.options._const.route, route)\n                        .setValue(\n                            this.options._const.oldValue,\n                            (t1 as textDiffNodeType).data\n                        )\n                        .setValue(\n                            this.options._const.newValue,\n                            (t2 as textDiffNodeType).data\n                        ),\n                ]\n            } else {\n                return [\n                    new Diff()\n                        .setValue(\n                            this.options._const.action,\n                            this.options._const.modifyComment\n                        )\n                        .setValue(this.options._const.route, route)\n                        .setValue(\n                            this.options._const.oldValue,\n                            (t1 as textDiffNodeType).data\n                        )\n                        .setValue(\n                            this.options._const.newValue,\n                            (t2 as textDiffNodeType).data\n                        ),\n                ]\n            }\n        }\n\n        t1 = t1 as elementDiffNodeType\n        t2 = t2 as elementDiffNodeType\n\n        attr1 = t1.attributes ? Object.keys(t1.attributes).sort() : []\n        attr2 = t2.attributes ? Object.keys(t2.attributes).sort() : []\n\n        attrLength = attr1.length\n        for (i = 0; i < attrLength; i++) {\n            attr = attr1[i]\n            pos = attr2.indexOf(attr)\n            if (pos === -1) {\n                diffs.push(\n                    new Diff()\n                        .setValue(\n                            this.options._const.action,\n                            this.options._const.removeAttribute\n                        )\n                        .setValue(this.options._const.route, route)\n                        .setValue(this.options._const.name, attr)\n                        .setValue(\n                            this.options._const.value,\n                            t1.attributes[attr]\n                        )\n                )\n            } else {\n                attr2.splice(pos, 1)\n                if (t1.attributes[attr] !== t2.attributes[attr]) {\n                    diffs.push(\n                        new Diff()\n                            .setValue(\n                                this.options._const.action,\n                                this.options._const.modifyAttribute\n                            )\n                            .setValue(this.options._const.route, route)\n                            .setValue(this.options._const.name, attr)\n                            .setValue(\n                                this.options._const.oldValue,\n                                t1.attributes[attr]\n                            )\n                            .setValue(\n                                this.options._const.newValue,\n                                t2.attributes[attr]\n                            )\n                    )\n                }\n            }\n        }\n\n        attrLength = attr2.length\n        for (i = 0; i < attrLength; i++) {\n            attr = attr2[i]\n            diffs.push(\n                new Diff()\n                    .setValue(\n                        this.options._const.action,\n                        this.options._const.addAttribute\n                    )\n                    .setValue(this.options._const.route, route)\n                    .setValue(this.options._const.name, attr)\n                    .setValue(this.options._const.value, t2.attributes[attr])\n            )\n        }\n\n        return diffs\n    }\n\n    findInnerDiff(\n        t1: elementDiffNodeType,\n        t2: elementDiffNodeType,\n        route: number[]\n    ) {\n        const t1ChildNodes = t1.childNodes ? t1.childNodes.slice() : []\n        const t2ChildNodes = t2.childNodes ? t2.childNodes.slice() : []\n        const last = Math.max(t1ChildNodes.length, t2ChildNodes.length)\n        let childNodesLengthDifference = Math.abs(\n            t1ChildNodes.length - t2ChildNodes.length\n        )\n        let diffs: Diff[] = []\n        let index = 0\n        if (!this.options.maxChildCount || last < this.options.maxChildCount) {\n            const cachedSubtrees = Boolean(t1.subsets && t1.subsetsAge--)\n            const subtrees = cachedSubtrees\n                ? t1.subsets\n                : t1.childNodes && t2.childNodes\n                ? markSubTrees(t1, t2)\n                : []\n            if (subtrees.length > 0) {\n                /* One or more groups have been identified among the childnodes of t1\n                 * and t2.\n                 */\n                diffs = this.attemptGroupRelocation(\n                    t1,\n                    t2,\n                    subtrees,\n                    route,\n                    cachedSubtrees\n                )\n                if (diffs.length > 0) {\n                    return diffs\n                }\n            }\n        }\n\n        /* 0 or 1 groups of similar child nodes have been found\n         * for t1 and t2. 1 If there is 1, it could be a sign that the\n         * contents are the same. When the number of groups is below 2,\n         * t1 and t2 are made to have the same length and each of the\n         * pairs of child nodes are diffed.\n         */\n\n        for (let i = 0; i < last; i += 1) {\n            const e1 = t1ChildNodes[i]\n            const e2 = t2ChildNodes[i]\n\n            if (childNodesLengthDifference) {\n                /* t1 and t2 have different amounts of childNodes. Add\n                 * and remove as necessary to obtain the same length */\n                if (e1 && !e2) {\n                    if (e1.nodeName === \"#text\") {\n                        diffs.push(\n                            new Diff()\n                                .setValue(\n                                    this.options._const.action,\n                                    this.options._const.removeTextElement\n                                )\n                                .setValue(\n                                    this.options._const.route,\n                                    route.concat(index)\n                                )\n                                .setValue(\n                                    this.options._const.value,\n                                    (e1 as textDiffNodeType).data\n                                )\n                        )\n                        index -= 1\n                    } else {\n                        diffs.push(\n                            new Diff()\n                                .setValue(\n                                    this.options._const.action,\n                                    this.options._const.removeElement\n                                )\n                                .setValue(\n                                    this.options._const.route,\n                                    route.concat(index)\n                                )\n                                .setValue(\n                                    this.options._const.element,\n                                    cleanNode(e1)\n                                )\n                        )\n                        index -= 1\n                    }\n                } else if (e2 && !e1) {\n                    if (e2.nodeName === \"#text\") {\n                        diffs.push(\n                            new Diff()\n                                .setValue(\n                                    this.options._const.action,\n                                    this.options._const.addTextElement\n                                )\n                                .setValue(\n                                    this.options._const.route,\n                                    route.concat(index)\n                                )\n                                .setValue(\n                                    this.options._const.value,\n                                    (e2 as textDiffNodeType).data\n                                )\n                        )\n                    } else {\n                        diffs.push(\n                            new Diff()\n                                .setValue(\n                                    this.options._const.action,\n                                    this.options._const.addElement\n                                )\n                                .setValue(\n                                    this.options._const.route,\n                                    route.concat(index)\n                                )\n                                .setValue(\n                                    this.options._const.element,\n                                    cleanNode(e2)\n                                )\n                        )\n                    }\n                }\n            }\n            /* We are now guaranteed that childNodes e1 and e2 exist,\n             * and that they can be diffed.\n             */\n            /* Diffs in child nodes should not affect the parent node,\n             * so we let these diffs be submitted together with other\n             * diffs.\n             */\n\n            if (e1 && e2) {\n                if (\n                    !this.options.maxChildCount ||\n                    last < this.options.maxChildCount\n                ) {\n                    diffs = diffs.concat(\n                        this.findNextDiff(e1, e2, route.concat(index))\n                    )\n                } else if (!isEqual(e1, e2)) {\n                    if (t1ChildNodes.length > t2ChildNodes.length) {\n                        if (e1.nodeName === \"#text\") {\n                            diffs.push(\n                                new Diff()\n                                    .setValue(\n                                        this.options._const.action,\n                                        this.options._const.removeTextElement\n                                    )\n                                    .setValue(\n                                        this.options._const.route,\n                                        route.concat(index)\n                                    )\n                                    .setValue(\n                                        this.options._const.value,\n                                        (e1 as textDiffNodeType).data\n                                    )\n                            )\n                        } else {\n                            diffs.push(\n                                new Diff()\n                                    .setValue(\n                                        this.options._const.action,\n                                        this.options._const.removeElement\n                                    )\n                                    .setValue(\n                                        this.options._const.element,\n                                        cleanNode(e1)\n                                    )\n                                    .setValue(\n                                        this.options._const.route,\n                                        route.concat(index)\n                                    )\n                            )\n                        }\n                        t1ChildNodes.splice(i, 1)\n                        i -= 1\n                        index -= 1\n\n                        childNodesLengthDifference -= 1\n                    } else if (t1ChildNodes.length < t2ChildNodes.length) {\n                        const cloneChild = cleanNode(e2)\n                        diffs = diffs.concat([\n                            new Diff()\n                                .setValue(\n                                    this.options._const.action,\n                                    this.options._const.addElement\n                                )\n                                .setValue(\n                                    this.options._const.element,\n                                    cloneChild\n                                )\n                                .setValue(\n                                    this.options._const.route,\n                                    route.concat(index)\n                                ),\n                        ])\n                        t1ChildNodes.splice(i, 0, cloneChild)\n                        childNodesLengthDifference -= 1\n                    } else {\n                        diffs = diffs.concat([\n                            new Diff()\n                                .setValue(\n                                    this.options._const.action,\n                                    this.options._const.replaceElement\n                                )\n                                .setValue(\n                                    this.options._const.oldValue,\n                                    cleanNode(e1)\n                                )\n                                .setValue(\n                                    this.options._const.newValue,\n                                    cleanNode(e2)\n                                )\n                                .setValue(\n                                    this.options._const.route,\n                                    route.concat(index)\n                                ),\n                        ])\n                    }\n                }\n            }\n            index += 1\n        }\n        t1.innerDone = true\n        return diffs\n    }\n\n    attemptGroupRelocation(\n        t1: elementDiffNodeType,\n        t2: elementDiffNodeType,\n        subtrees: subsetType[],\n        route: number[],\n        cachedSubtrees: boolean\n    ) {\n        /* Either t1.childNodes and t2.childNodes have the same length, or\n         * there are at least two groups of similar elements can be found.\n         * attempts are made at equalizing t1 with t2. First all initial\n         * elements with no group affiliation (gaps=true) are removed (if\n         * only in t1) or added (if only in t2). Then the creation of a group\n         * relocation diff is attempted.\n         */\n        const gapInformation = getGapInformation(t1, t2, subtrees)\n        const gaps1 = gapInformation.gaps1\n        const gaps2 = gapInformation.gaps2\n        let shortest = Math.min(gaps1.length, gaps2.length)\n        let destinationDifferent\n        let toGroup\n        let group\n        let node\n        let similarNode\n        let testI\n        const diffs = []\n\n        for (\n            let index2 = 0, index1 = 0;\n            index2 < shortest;\n            index1 += 1, index2 += 1\n        ) {\n            if (\n                cachedSubtrees &&\n                (gaps1[index2] === true || gaps2[index2] === true)\n            ) {\n                // pass\n            } else if (gaps1[index2] === true) {\n                node = t1.childNodes[index1]\n                if (node.nodeName === \"#text\") {\n                    if (t2.childNodes[index2].nodeName === \"#text\") {\n                        if (\n                            (node as textDiffNodeType).data !==\n                            (t2.childNodes[index2] as textDiffNodeType).data\n                        ) {\n                            testI = index1\n                            while (\n                                t1.childNodes.length > testI + 1 &&\n                                t1.childNodes[testI + 1].nodeName === \"#text\"\n                            ) {\n                                testI += 1\n                                if (\n                                    (t2.childNodes[index2] as textDiffNodeType)\n                                        .data ===\n                                    (t1.childNodes[testI] as textDiffNodeType)\n                                        .data\n                                ) {\n                                    similarNode = true\n                                    break\n                                }\n                            }\n                            if (!similarNode) {\n                                diffs.push(\n                                    new Diff()\n                                        .setValue(\n                                            this.options._const.action,\n                                            this.options._const\n                                                .modifyTextElement\n                                        )\n                                        .setValue(\n                                            this.options._const.route,\n                                            route.concat(index2)\n                                        )\n                                        .setValue(\n                                            this.options._const.oldValue,\n                                            node.data\n                                        )\n                                        .setValue(\n                                            this.options._const.newValue,\n                                            (\n                                                t2.childNodes[\n                                                    index2\n                                                ] as textDiffNodeType\n                                            ).data\n                                        )\n                                )\n                                return diffs\n                            }\n                        }\n                    } else {\n                        diffs.push(\n                            new Diff()\n                                .setValue(\n                                    this.options._const.action,\n                                    this.options._const.removeTextElement\n                                )\n                                .setValue(\n                                    this.options._const.route,\n                                    route.concat(index2)\n                                )\n                                .setValue(this.options._const.value, node.data)\n                        )\n                        gaps1.splice(index2, 1)\n                        shortest = Math.min(gaps1.length, gaps2.length)\n                        index2 -= 1\n                    }\n                } else {\n                    diffs.push(\n                        new Diff()\n                            .setValue(\n                                this.options._const.action,\n                                this.options._const.removeElement\n                            )\n                            .setValue(\n                                this.options._const.route,\n                                route.concat(index2)\n                            )\n                            .setValue(\n                                this.options._const.element,\n                                cleanNode(node)\n                            )\n                    )\n                    gaps1.splice(index2, 1)\n                    shortest = Math.min(gaps1.length, gaps2.length)\n                    index2 -= 1\n                }\n            } else if (gaps2[index2] === true) {\n                node = t2.childNodes[index2]\n                if (node.nodeName === \"#text\") {\n                    diffs.push(\n                        new Diff()\n                            .setValue(\n                                this.options._const.action,\n                                this.options._const.addTextElement\n                            )\n                            .setValue(\n                                this.options._const.route,\n                                route.concat(index2)\n                            )\n                            .setValue(this.options._const.value, node.data)\n                    )\n                    gaps1.splice(index2, 0, true)\n                    shortest = Math.min(gaps1.length, gaps2.length)\n                    index1 -= 1\n                } else {\n                    diffs.push(\n                        new Diff()\n                            .setValue(\n                                this.options._const.action,\n                                this.options._const.addElement\n                            )\n                            .setValue(\n                                this.options._const.route,\n                                route.concat(index2)\n                            )\n                            .setValue(\n                                this.options._const.element,\n                                cleanNode(node)\n                            )\n                    )\n                    gaps1.splice(index2, 0, true)\n                    shortest = Math.min(gaps1.length, gaps2.length)\n                    index1 -= 1\n                }\n            } else if (gaps1[index2] !== gaps2[index2]) {\n                if (diffs.length > 0) {\n                    return diffs\n                }\n                // group relocation\n                group = subtrees[gaps1[index2] as number]\n                toGroup = Math.min(\n                    group.newValue,\n                    t1.childNodes.length - group.length\n                )\n                if (toGroup !== group.oldValue) {\n                    // Check whether destination nodes are different than originating ones.\n                    destinationDifferent = false\n                    for (let j = 0; j < group.length; j += 1) {\n                        if (\n                            !roughlyEqual(\n                                t1.childNodes[toGroup + j],\n                                t1.childNodes[group.oldValue + j],\n                                {},\n                                false,\n                                true\n                            )\n                        ) {\n                            destinationDifferent = true\n                        }\n                    }\n                    if (destinationDifferent) {\n                        return [\n                            new Diff()\n                                .setValue(\n                                    this.options._const.action,\n                                    this.options._const.relocateGroup\n                                )\n                                .setValue(\n                                    this.options._const.groupLength,\n                                    group.length\n                                )\n                                .setValue(\n                                    this.options._const.from,\n                                    group.oldValue\n                                )\n                                .setValue(this.options._const.to, toGroup)\n                                .setValue(this.options._const.route, route),\n                        ]\n                    }\n                }\n            }\n        }\n        return diffs\n    }\n\n    findValueDiff(\n        t1: elementDiffNodeType,\n        t2: elementDiffNodeType,\n        route: number[]\n    ) {\n        // Differences of value. Only useful if the value/selection/checked value\n        // differs from what is represented in the DOM. For example in the case\n        // of filled out forms, etc.\n        const diffs = []\n\n        if (t1.selected !== t2.selected) {\n            diffs.push(\n                new Diff()\n                    .setValue(\n                        this.options._const.action,\n                        this.options._const.modifySelected\n                    )\n                    .setValue(this.options._const.oldValue, t1.selected)\n                    .setValue(this.options._const.newValue, t2.selected)\n                    .setValue(this.options._const.route, route)\n            )\n        }\n\n        if (\n            (t1.value || t2.value) &&\n            t1.value !== t2.value &&\n            t1.nodeName !== \"OPTION\"\n        ) {\n            diffs.push(\n                new Diff()\n                    .setValue(\n                        this.options._const.action,\n                        this.options._const.modifyValue\n                    )\n                    .setValue(this.options._const.oldValue, t1.value || \"\")\n                    .setValue(this.options._const.newValue, t2.value || \"\")\n                    .setValue(this.options._const.route, route)\n            )\n        }\n        if (t1.checked !== t2.checked) {\n            diffs.push(\n                new Diff()\n                    .setValue(\n                        this.options._const.action,\n                        this.options._const.modifyChecked\n                    )\n                    .setValue(this.options._const.oldValue, t1.checked)\n                    .setValue(this.options._const.newValue, t2.checked)\n                    .setValue(this.options._const.route, route)\n            )\n        }\n\n        return diffs\n    }\n}\n","import {\n    ConstNames,\n    ConstNamesPartial,\n    DiffDOMOptions,\n    DiffDOMOptionsPartial,\n    diffType,\n    elementNodeType,\n    textNodeType,\n} from \"./types\"\nimport { applyDOM, undoDOM } from \"./dom/index\"\nimport { Diff } from \"./helpers\"\nimport { DiffFinder } from \"./virtual/index\"\nexport { nodeToObj, stringToObj } from \"./virtual/index\"\n\nconst DEFAULT_OPTIONS = {\n    debug: false,\n    diffcap: 10, // Limit for how many diffs are accepting when debugging. Inactive when debug is false.\n    maxDepth: false, // False or a numeral. If set to a numeral, limits the level of depth that the the diff mechanism looks for differences. If false, goes through the entire tree.\n    maxChildCount: 50, // False or a numeral. If set to a numeral, only does a simplified form of diffing of contents so that the number of diffs cannot be higher than the number of child nodes.\n    valueDiffing: true, // Whether to take into consideration the values of forms that differ from auto assigned values (when a user fills out a form).\n    // syntax: textDiff: function (node, currentValue, expectedValue, newValue)\n    textDiff(\n        node: textNodeType,\n        currentValue: string,\n        expectedValue: string,\n        newValue: string\n    ) {\n        node.data = newValue\n        return\n    },\n    // empty functions were benchmarked as running faster than both\n    // `f && f()` and `if (f) { f(); }`\n    preVirtualDiffApply() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    postVirtualDiffApply() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    preDiffApply() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    postDiffApply() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    filterOuterDiff: null,\n    compress: false, // Whether to work with compressed diffs\n    _const: false, // object with strings for every change types to be used in diffs.\n    document:\n        typeof window !== \"undefined\" && window.document\n            ? window.document\n            : false,\n    components: [], // list of components used for converting from string\n}\n\nexport class DiffDOM {\n    options: DiffDOMOptions\n    constructor(options: DiffDOMOptionsPartial = {}) {\n        // IE11 doesn't have Object.assign and buble doesn't translate object spreaders\n        // by default, so this is the safest way of doing it currently.\n        Object.entries(DEFAULT_OPTIONS).forEach(([key, value]) => {\n            if (!Object.prototype.hasOwnProperty.call(options, key)) {\n                options[key] = value\n            }\n        })\n\n        if (!options._const) {\n            const varNames = [\n                \"addAttribute\",\n                \"modifyAttribute\",\n                \"removeAttribute\",\n                \"modifyTextElement\",\n                \"relocateGroup\",\n                \"removeElement\",\n                \"addElement\",\n                \"removeTextElement\",\n                \"addTextElement\",\n                \"replaceElement\",\n                \"modifyValue\",\n                \"modifyChecked\",\n                \"modifySelected\",\n                \"modifyComment\",\n                \"action\",\n                \"route\",\n                \"oldValue\",\n                \"newValue\",\n                \"element\",\n                \"group\",\n                \"groupLength\",\n                \"from\",\n                \"to\",\n                \"name\",\n                \"value\",\n                \"data\",\n                \"attributes\",\n                \"nodeName\",\n                \"childNodes\",\n                \"checked\",\n                \"selected\",\n            ]\n            const constNames: ConstNamesPartial = {}\n            if (options.compress) {\n                varNames.forEach(\n                    (varName, index) => (constNames[varName] = index)\n                )\n            } else {\n                varNames.forEach((varName) => (constNames[varName] = varName))\n            }\n            options._const = constNames as ConstNames\n        }\n\n        this.options = options as DiffDOMOptions\n    }\n\n    apply(tree: Element, diffs: (Diff | diffType)[]) {\n        return applyDOM(tree, diffs, this.options)\n    }\n\n    undo(tree: Element, diffs: (Diff | diffType)[]) {\n        return undoDOM(tree, diffs, this.options)\n    }\n\n    diff(\n        t1Node: string | elementNodeType | Element,\n        t2Node: string | elementNodeType | Element\n    ) {\n        const finder = new DiffFinder(t1Node, t2Node, this.options)\n        return finder.init()\n    }\n}\n","/**\n * Use TraceLogger to figure out function calls inside\n * JS objects by wrapping an object with a TraceLogger\n * instance.\n *\n * Pretty-prints the call trace (using unicode box code)\n * when tracelogger.toString() is called.\n */\n\n/**\n * Wrap an object by calling new TraceLogger(obj)\n *\n * If you're familiar with Python decorators, this\n * does roughly the same thing, adding pre/post\n * call hook logging calls so that you can see\n * what's going on.\n */\nexport class TraceLogger {\n    messages: string[]\n    pad: string\n    padding: string\n    tick: number\n    constructor(obj = {}) {\n        this.pad = \"│   \"\n        this.padding = \"\"\n        this.tick = 1\n        this.messages = []\n        const wrapkey = (obj: object, key: string) => {\n            // trace this function\n            const oldfn = obj[key]\n            obj[key] = (\n                ...args: ((\n                    ...args: (\n                        | string\n                        | HTMLElement\n                        | number\n                        | boolean\n                        | false\n                        | (string | HTMLElement | number | boolean | false)[]\n                    )[]\n                ) => void)[]\n            ) => {\n                this.fin(key, Array.prototype.slice.call(args))\n                const result = oldfn.apply(obj, args)\n                this.fout(key, result)\n                return result\n            }\n        }\n        // can't use Object.keys for prototype walking\n        for (let key in obj) {\n            if (typeof obj[key] === \"function\") {\n                wrapkey(obj, key)\n            }\n        }\n        this.log(\"┌ TRACELOG START\")\n    }\n    // called when entering a function\n    fin(\n        fn: string,\n        args:\n            | string\n            | HTMLElement\n            | number\n            | boolean\n            | false\n            | (string | HTMLElement | number | boolean | false)[]\n    ) {\n        this.padding += this.pad\n        this.log(`├─> entering ${fn}`, args)\n    }\n    // called when exiting a function\n    fout(\n        fn: string,\n        result:\n            | string\n            | HTMLElement\n            | number\n            | boolean\n            | false\n            | (string | HTMLElement | number | boolean | false)[]\n    ) {\n        this.log(\"│<──┘ generated return value\", result)\n        this.padding = this.padding.substring(\n            0,\n            this.padding.length - this.pad.length\n        )\n    }\n    // log message formatting\n    format(s: string, tick: number) {\n        let nf = function (t: number) {\n            let tStr = `${t}`\n            while (tStr.length < 4) {\n                tStr = `0${t}`\n            }\n            return tStr\n        }\n        return `${nf(tick)}> ${this.padding}${s}`\n    }\n    // log a trace message\n    log(...args) {\n        const stringCollapse = function (\n            v:\n                | string\n                | HTMLElement\n                | number\n                | boolean\n                | false\n                | (string | HTMLElement | number | boolean | false)[]\n        ) {\n            if (!v) {\n                return \"<falsey>\"\n            }\n            if (typeof v === \"string\") {\n                return v\n            }\n            if (v instanceof HTMLElement) {\n                return v.outerHTML || \"<empty>\"\n            }\n            if (v instanceof Array) {\n                return `[${v.map(stringCollapse).join(\",\")}]`\n            }\n            return v.toString() || v.valueOf() || \"<unknown>\"\n        }\n        const s = args.map(stringCollapse).join(\", \")\n        this.messages.push(this.format(s, this.tick++))\n    }\n    // turn the log into a structured string with\n    // unicode box codes to make it a sensible trace.\n    toString() {\n        let cap = \"×   \"\n        let terminator = \"└───\"\n        while (terminator.length <= this.padding.length + this.pad.length) {\n            terminator += cap\n        }\n        let _ = this.padding\n        this.padding = \"\"\n        terminator = this.format(terminator, this.tick)\n        this.padding = _\n        return `${this.messages.join(\"\\n\")}\\n${terminator}`\n    }\n}\n"],"names":["objToNode","objNode","insideSvg","options","node","nodeName","document","createTextNode","data","createComment","createElementNS","toLowerCase","createElement","attributes","Object","entries","forEach","_a","key","value","setAttribute","childNodes","childNode","appendChild","valueDiffing","HTMLButtonElement","HTMLDataElement","HTMLInputElement","HTMLLIElement","HTMLMeterElement","HTMLOptionElement","HTMLProgressElement","HTMLParamElement","checked","selected","getFromRoute","route","slice","length","c","splice","applyDiff","tree","diff","newNode","reference","action","_const","addElement","addTextElement","includes","info","preDiffApply","addAttribute","Element","name","modifyAttribute","newValue","removeAttribute","modifyTextElement","Text","textDiff","oldValue","modifyValue","modifyComment","Comment","modifyChecked","modifySelected","replaceElement","parentNode","replaceChild","relocateGroup","Array","apply","groupLength","map","removeChild","from","index","to","insertBefore","removeElement","parentRoute","element","namespaceURI","removeTextElement","nodeType","console","log","postDiffApply","swap","obj","p1","p2","tmp","undoDOM","diffs","reverse","undoDiff","elementDescriptors","el","output","push","concat","replace","id","findUniqueDescriptors","li","uniqueDescriptors","duplicateDescriptors","descriptor","inUnique","uniqueInBoth","l1","l2","l1Unique","l2Unique","inBoth","keys","removeDone","outerDone","innerDone","valueDone","every","cleanNode","diffNode","prototype","hasOwnProperty","call","elementNode","diffChildNode","isEqual","e1","e2","Boolean","e1Attributes","e2Attributes","attribute","roughlyEqual","sameSiblings","preventRecursion","nodeList1","nodeList2","childUniqueDescriptors_1","makeBooleanArray","n","v","markSubTrees","oldTree","newTree","oldChildren","newChildren","marked1","marked2","subsets","returnIndex","arguments","foundAllSubsets","subset","c1","c2","lcsSize","c1Length","c2Length","matches","subsetsSame","some","i","c1Desc","c2Desc","description","c1Index","c1Element","c2Index","c2Element","findCommonSubsets","item","markBoth","subsetsAge","DiffTracker","this","list","add","fn","Diff","_this","toString","JSON","stringify","setValue","aKey","aValue","getFromVirtualRoute","nodeIndex","undefined","applyVirtual","routeInfo","newSubsets","preVirtualDiffApply","movedNode","splitLength","c_1","c_2","filter","postVirtualDiffApply","applyVirtualDiff","nodeToObj","aNode","HTMLTextAreaElement","type","tagRE","empty","create","attrRE","unescape","string","lookup","area","base","br","col","embed","hr","img","input","keygen","link","menuItem","meta","param","source","track","wbr","parseTag","tag","res","voidElement","tagMatch","match","toUpperCase","charAt","startsWith","endIndex","indexOf","reg","RegExp","result","done","exec","trim","attr","arr","split","lastIndex","substring","stringToObj","html","components","current","level","inComponent","end","isOpen","isComment","start","nextChar","comment","parent_1","parent_2","DiffFinder","t1Node","t2Node","t1","parse","t2","diffcount","foundAll","debug","t1Orig","t2Orig","tracker","init","findDiffs","diffcap","Error","findNextDiff","error","fdiffs","maxDepth","findOuterDiff","filterOuterDiff","findInnerDiff","findValueDiff","attr1","attr2","attrLength","pos","Math","abs","sort","t1ChildNodes","t2ChildNodes","last","max","childNodesLengthDifference","maxChildCount","cachedSubtrees","subtrees","attemptGroupRelocation","cloneChild","destinationDifferent","toGroup","group","similarNode","testI","gapInformation","stable","gaps1","gaps2","endOld","endNew","j","getGapInformation","shortest","min","index2","index1","DEFAULT_OPTIONS","currentValue","expectedValue","compress","window","DiffDOM","varNames","constNames_1","varName","applyDOM","undo","TraceLogger","pad","padding","tick","messages","wrapkey","oldfn","args","_i","fin","fout","format","s","t","tStr","nf","stringCollapse","HTMLElement","outerHTML","join","valueOf","terminator","_"],"mappings":"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"}